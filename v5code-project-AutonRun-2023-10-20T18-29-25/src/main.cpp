/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       C:\Users\alex_                                            */
/*    Created:      Mon Aug 14 2023                                           */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// FrontLeft            motor         18              
// FrontRight           motor         3               
// BackLeft             motor         20              
// BackRight            motor         1               
// Controller1          controller                    
// Flap1                digital_out   A               
// Flap2                digital_out   B               
// Catapult             motor         17              
// Intake               motor         7               
// Rotation             rotation      10              
// MiddleLeft           motor         19              
// MiddleRight          motor         2               
// Inertial1            inertial      4               
// ---- END VEXCODE CONFIGURED DEVICES ----


#include "vex.h"
#include <string.h>
#include <string>
#include <iostream>
#include <sstream>

using namespace std;
using namespace vex; 
int go;
int rotate;
int count = 0;
string wing1 = "";
string wing2 = "";


string save1 = "";
int correction1 = 0;
string save2 = "";
int correction2 = 270;
string save3 = "";

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here
void correct_orientation(int correction){
  while(Inertial1.angle() < correction - 2){
    FrontLeft.spin(vex::forward, 30, percent);
    FrontRight.spin(vex::reverse, 30, percent);
    MiddleLeft.spin(vex::forward, 30, percent);
    MiddleRight.spin(vex::reverse, 30, percent);
    BackLeft.spin(vex::forward, 30, percent);
    BackRight.spin(vex::reverse, 30, percent);
  }
  while(Inertial1.angle() > correction + 2){
    FrontLeft.spin(vex::reverse, 30, percent);
    FrontRight.spin(vex::forward, 30, percent);
    MiddleLeft.spin(vex::reverse, 30, percent);
    MiddleRight.spin(vex::forward, 30, percent);
    BackLeft.spin(vex::reverse, 30, percent);
    BackRight.spin(vex::forward, 30, percent);
  }
  FrontLeft.stop(brake);
  FrontRight.stop(brake);
  MiddleLeft.stop(brake);
  MiddleRight.stop(brake);
  BackLeft.stop(brake);
  BackRight.stop(brake);
}

void process_save(string save){
  while (1) {
    if(save.length() != 0){
      // spin chassis
      go = (save[0] - 48) * 10 + save[1] - 48;
      rotate = (save[2] - 48) * 10 + save[3] - 48;
      wing1 = save[4];
      wing2 = save[5];
      cout << go << endl;
      cout << rotate << endl;
      if(go != 49 || rotate != 49){
        if(rotate == 49){
          cout << "1" << endl;
          FrontLeft.spin(vex::forward, go * 2 - 99, percent);
          FrontRight.spin(vex::forward, go * 2 - 99, percent);
          MiddleLeft.spin(vex::forward, go * 2 - 99, percent);
          MiddleRight.spin(vex::forward, go * 2 - 99, percent);
          BackLeft.spin(vex::forward, go * 2 - 99, percent);
          BackRight.spin(vex::forward, go * 2 - 99, percent);
        }
        else{
          cout << "2" << endl;
          FrontLeft.spin(vex::forward, ((go * 2 - 99)) + ((rotate * 2 - 99) / 2.3), percent);
          FrontRight.spin(vex::forward, ((go * 2 - 99)) - ((rotate * 2 - 99) / 2.3), percent);
          MiddleRight.spin(vex::forward, ((go * 2 - 99)) - ((rotate * 2 - 99) / 2.3), percent);
          MiddleLeft.spin(vex::forward, ((go * 2 - 99)) + ((rotate * 2 - 99) / 2.3), percent);
          BackLeft.spin(vex::forward, ((go * 2 - 99)) + ((rotate * 2 - 99) / 2.3), percent);
          BackRight.spin(vex::forward, ((go * 2 - 99)) - ((rotate * 2 - 99) / 2.3), percent);
        }
      }
      else{
        cout << "3" << endl;
        FrontLeft.stop(brake);
        FrontRight.stop(brake);
        MiddleLeft.stop(brake);
        MiddleRight.stop(brake);
        BackLeft.stop(brake);
        BackRight.stop(brake);
      }
      if(wing1 == "1"){
        Flap1.set(true);
      }
      else{
        Flap1.set(false);
      }
      if(wing2 == "1"){
        Flap2.set(true);
      }
      else{
        Flap2.set(false);
      }
      //delete read parts of save file
      for (int i = 0; i < 6; i++) {
        save.erase(save.begin());
      }
    }
    else{
      FrontLeft.stop(brake);
      FrontRight.stop(brake);
      MiddleLeft.stop(brake);
      MiddleRight.stop(brake);
      BackLeft.stop(brake);
      BackRight.stop(brake);
      break;
    }
    wait(20, msec);
  }
}
/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();
  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous(void) {
  Catapult.setVelocity(90, percent);
  while(count > 0){
    count -= 1;
    Catapult.spinFor(vex::forward, 1, turns);
    wait(50, msec);
  }
  Catapult.spinFor(vex::forward, 0.5, turns);
  process_save(save1);
  correct_orientation(correction1);
  process_save(save2);
  correct_orientation(correction2);
  process_save(save3);
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {

    wait(100, msec);
  }
}

