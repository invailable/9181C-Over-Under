/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       C:\Users\alex_     W Alex                                 */
/*    Created:      Mon Aug 14 2023                                           */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// FrontLeft            motor         18              
// FrontRight           motor         8               
// BackLeft             motor         20              
// BackRight            motor         10              
// Controller1          controller                    
// Flap1                digital_out   A               
// Catapult             motor         5               
// Intake               motor         17              
// Rotation             rotation      4               
// MiddleLeft           motor         19              
// MiddleRight          motor         9               
// Inertial1            inertial      1               
// ---- END VEXCODE CONFIGURED DEVICES ----


#include "vex.h"
#include <string.h>
#include <string>
#include <iostream>
#include <sstream>

using namespace std;
using namespace vex; 
int go;
int rotate;
int count = 46;
string wing1 = "";
string intake = "";

string save = "";
competition Competition;

//spins the chassis motors
void chassis(int left, int right){
  FrontLeft.spin(vex::forward, left, percent);
  FrontRight.spin(vex::forward, right, percent);
  MiddleLeft.spin(vex::forward, left, percent);
  MiddleRight.spin(vex::forward, right, percent);
  BackLeft.spin(vex::forward, left, percent);
  BackRight.spin(vex::forward, right, percent);
}

//brakes all chassis motors
void halt(){
  FrontLeft.stop(brake);
  FrontRight.stop(brake);
  MiddleLeft.stop(brake);
  MiddleRight.stop(brake);
  BackLeft.stop(brake);
  BackRight.stop(brake);
}

void CalibrateInertial()
{
  Inertial1.calibrate();
  while (Inertial1.isCalibrating()) {
      wait(800, msec);
  }
  wait(800, msec);
  Controller1.rumble(".");
}
//corrects the orientation of the robot when off course

void correct_orientation(int sign, string correction){
  cout << "actual: " << Inertial1.rotation(degrees) << endl;
  int c = atoi(correction.c_str());
  if(sign == 0){
    c = c * -1;
  }
  cout << c << endl;
  cout << sign << endl;
  
  if(Inertial1.rotation(degrees) < c - 20){
    while(Inertial1.rotation(degrees) < c - 10){
      cout << "correcting1" << endl;
      cout << "actual: " << Inertial1.rotation(degrees) << endl;
      cout << c << endl;
      chassis(15, -15);
      wait(20, msec);
    }
  }
  else if(Inertial1.rotation(degrees) > c + 20){
    while(Inertial1.rotation(degrees) > c + 10){
      cout << "correcting2" << endl;
      cout << "actual: " << Inertial1.rotation(degrees) << endl;
      cout << c << endl;
      chassis(-15, 15);
      wait(20, msec);
    }
  }
  
}
void pre_auton(void) {
  vexcodeInit();
  CalibrateInertial();
}

void autonomous(void) {
  //catapult code
  Catapult.setVelocity(100, percent);
  Intake.spin(vex::forward, -50, percent);
  while(count > 0){
    count -= 1;
    Catapult.spinFor(vex::forward, 1, turns);
  }
  Intake.stop();
  Catapult.spinFor(vex::forward, 0.6, turns);
  //reading the save file
  while (1) {
    if(save.length() != 0){
      // spin chassis
      go = (save[0] - 48) * 10 + save[1] - 48;
      rotate = (save[2] - 48) * 10 + save[3] - 48;
      wing1 = save[4];
      intake = save[5];
      if(go != 49 || rotate != 49){
        //if the robot is not rotating, do not drift rotation
        if(rotate == 49){
          chassis(go * 2 - 99, go * 2 - 99);
        }
        //if the robot is not going forward, spin slower
        else if(go == 49){
          chassis((rotate * 2 - 99) / 1.5, -(rotate * 2 - 99) / 1.5);
        }
        //otherwise, just drive
        else{
          chassis(((go * 2 - 99)) + (rotate * 2 - 99), ((go * 2 - 99)) - (rotate * 2 - 99));
        }
      }
      else{
        halt();
      }
      if(wing1 == "1"){
        Flap1.set(true);
      }
      else{
        Flap1.set(false);
      }
      if(intake == "2"){
        Intake.spin(vex::forward, 100, percent);
      }
      else if(intake == "1"){
        Intake.spin(vex::forward, -100, percent);
      }
      else{
        Intake.stop(hold);
      }
      if(save[6] == '0'){
        cout << "ahdowabcuis" << endl;
        correct_orientation(0, save.substr(7, 4));
      }
      else if(save[6] == '1'){
        cout << "dwacdagds" << endl;
        correct_orientation(1, save.substr(7, 4));
      }
      //delete read parts of save file
      for (int i = 0; i < 11; i++) {
        save.erase(save.begin());
      }
    }
    else{
      halt();
      break;
    }
    wait(20, msec);
  }
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {

    wait(100, msec);
  }
}